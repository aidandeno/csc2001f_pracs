<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="JaCoCoverage analysis (powered by JaCoCo from EclEmma)"><sessioninfo id="sl-dual-145-18a225c3" start="1425884362825" dump="1425884363384"/><package name=""><class name="BSTMain"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="main" desc="([Ljava/lang/String;)V" line="26"><counter type="INSTRUCTION" missed="112" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="22" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="115" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="23" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="BinaryTreeNode"><method name="&lt;init&gt;" desc="()V" line="21"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="32"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(LBinaryTreeNode;Ljava/lang/Integer;LBinaryTreeNode;)V" line="39"><counter type="INSTRUCTION" missed="4" covered="16"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasLeft" desc="()Z" line="52"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasRight" desc="()Z" line="60"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getItem" desc="()Ljava/lang/Integer;" line="68"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getLeft" desc="()LBinaryTreeNode;" line="77"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRight" desc="()LBinaryTreeNode;" line="87"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="setLeft" desc="(LBinaryTreeNode;)V" line="96"><counter type="INSTRUCTION" missed="4" covered="9"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="setRight" desc="(LBinaryTreeNode;)V" line="105"><counter type="INSTRUCTION" missed="4" covered="9"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getHeight" desc="()Ljava/lang/Integer;" line="114"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getLargest" desc="()Ljava/lang/Integer;" line="137"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="8"><counter type="INSTRUCTION" missed="2" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="51" covered="139"/><counter type="BRANCH" missed="15" covered="23"/><counter type="LINE" missed="6" covered="35"/><counter type="COMPLEXITY" missed="14" covered="18"/><counter type="METHOD" missed="1" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="SimpleTreeWriterImpl"><method name="&lt;init&gt;" desc="(Ljava/io/PrintStream;)V" line="29"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setDestination" desc="(Ljava/io/PrintStream;)V" line="41"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="write" desc="(LBinaryTreeNode;)V" line="54"><counter type="INSTRUCTION" missed="283" covered="0"/><counter type="BRANCH" missed="36" covered="0"/><counter type="LINE" missed="43" covered="0"/><counter type="COMPLEXITY" missed="19" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="296" covered="0"/><counter type="BRANCH" missed="36" covered="0"/><counter type="LINE" missed="48" covered="0"/><counter type="COMPLEXITY" missed="21" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="SimpleBST"><method name="&lt;init&gt;" desc="()V" line="17"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRoot" desc="()LBinaryTreeNode;" line="23"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(Ljava/lang/Integer;)V" line="31"><counter type="INSTRUCTION" missed="4" covered="20"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(Ljava/lang/Integer;LBinaryTreeNode;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="76"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getHeight" desc="()Ljava/lang/Integer;" line="84"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getLargest" desc="()Ljava/lang/Integer;" line="100"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="similar" desc="(LSimpleBST;)Z" line="109"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="print" desc="(LSimpleBST;LSimpleTreeWriter;)V" line="117"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="8"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="34" covered="86"/><counter type="BRANCH" missed="9" covered="13"/><counter type="LINE" missed="7" covered="20"/><counter type="COMPLEXITY" missed="9" covered="12"/><counter type="METHOD" missed="3" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="TreeUtils"><method name="&lt;init&gt;" desc="()V" line="17"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isPlaceHolder" desc="(LBinaryTreeNode;)Z" line="28"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="levelZero" desc="(LBinaryTreeNode;)Ljava/util/List;" line="40"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextLevel" desc="(Ljava/util/List;)Ljava/util/List;" line="57"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="similar" desc="(LBinaryTreeNode;LBinaryTreeNode;)Z" line="96"><counter type="INSTRUCTION" missed="11" covered="92"/><counter type="BRANCH" missed="21" covered="29"/><counter type="LINE" missed="3" covered="12"/><counter type="COMPLEXITY" missed="19" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="74" covered="92"/><counter type="BRANCH" missed="29" covered="29"/><counter type="LINE" missed="18" covered="12"/><counter type="COMPLEXITY" missed="27" covered="7"/><counter type="METHOD" missed="4" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="BinaryTreeNode.java"><line nr="8" mi="2" ci="5" mb="1" cb="1"/><line nr="18" mi="0" ci="5" mb="0" cb="0"/><line nr="21" mi="0" ci="2" mb="0" cb="0"/><line nr="22" mi="0" ci="3" mb="0" cb="0"/><line nr="23" mi="0" ci="3" mb="0" cb="0"/><line nr="24" mi="0" ci="3" mb="0" cb="0"/><line nr="25" mi="0" ci="1" mb="0" cb="0"/><line nr="32" mi="0" ci="5" mb="0" cb="0"/><line nr="33" mi="0" ci="1" mb="0" cb="0"/><line nr="39" mi="0" ci="2" mb="0" cb="0"/><line nr="40" mi="4" ci="4" mb="2" cb="2"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="7" mb="0" cb="2"/><line nr="60" mi="0" ci="7" mb="0" cb="2"/><line nr="68" mi="0" ci="3" mb="0" cb="0"/><line nr="77" mi="4" ci="5" mb="2" cb="2"/><line nr="78" mi="0" ci="3" mb="0" cb="0"/><line nr="87" mi="4" ci="5" mb="2" cb="2"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="4" ci="5" mb="2" cb="2"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="98" mi="0" ci="1" mb="0" cb="0"/><line nr="105" mi="4" ci="5" mb="2" cb="2"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="107" mi="0" ci="1" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="4"/><line nr="116" mi="0" ci="13" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="0" cb="2"/><line nr="120" mi="0" ci="8" mb="0" cb="0"/><line nr="122" mi="0" ci="3" mb="0" cb="2"/><line nr="124" mi="0" ci="8" mb="0" cb="0"/><line nr="128" mi="0" ci="3" mb="0" cb="0"/><line nr="137" mi="3" ci="0" mb="0" cb="0"/><line nr="138" mi="3" ci="0" mb="2" cb="0"/><line nr="140" mi="9" ci="0" mb="0" cb="0"/><line nr="142" mi="3" ci="0" mb="2" cb="0"/><line nr="144" mi="9" ci="0" mb="0" cb="0"/><line nr="147" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="139"/><counter type="BRANCH" missed="15" covered="23"/><counter type="LINE" missed="6" covered="35"/><counter type="COMPLEXITY" missed="14" covered="18"/><counter type="METHOD" missed="1" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BSTMain.java"><line nr="22" mi="3" ci="0" mb="0" cb="0"/><line nr="26" mi="3" ci="0" mb="0" cb="0"/><line nr="27" mi="5" ci="0" mb="0" cb="0"/><line nr="29" mi="8" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="2" cb="0"/><line nr="36" mi="6" ci="0" mb="0" cb="0"/><line nr="39" mi="3" ci="0" mb="0" cb="0"/><line nr="40" mi="5" ci="0" mb="0" cb="0"/><line nr="41" mi="8" ci="0" mb="0" cb="0"/><line nr="44" mi="4" ci="0" mb="0" cb="0"/><line nr="46" mi="3" ci="0" mb="2" cb="0"/><line nr="48" mi="6" ci="0" mb="0" cb="0"/><line nr="52" mi="3" ci="0" mb="0" cb="0"/><line nr="53" mi="6" ci="0" mb="0" cb="0"/><line nr="54" mi="3" ci="0" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="59" mi="4" ci="0" mb="2" cb="0"/><line nr="61" mi="4" ci="0" mb="0" cb="0"/><line nr="65" mi="3" ci="0" mb="0" cb="0"/><line nr="69" mi="12" ci="0" mb="0" cb="0"/><line nr="70" mi="12" ci="0" mb="0" cb="0"/><line nr="71" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="115" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="23" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="SimpleBST.java"><line nr="8" mi="2" ci="6" mb="1" cb="1"/><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="3" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="23" mi="0" ci="3" mb="0" cb="0"/><line nr="31" mi="4" ci="4" mb="2" cb="2"/><line nr="32" mi="0" ci="3" mb="0" cb="2"/><line nr="34" mi="0" ci="7" mb="0" cb="0"/><line nr="38" mi="0" ci="5" mb="0" cb="0"/><line nr="40" mi="0" ci="1" mb="0" cb="0"/><line nr="47" mi="0" ci="6" mb="0" cb="2"/><line nr="49" mi="0" ci="3" mb="0" cb="2"/><line nr="51" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="7" mb="0" cb="0"/><line nr="60" mi="0" ci="3" mb="0" cb="2"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="66" mi="0" ci="6" mb="0" cb="0"/><line nr="69" mi="0" ci="1" mb="0" cb="0"/><line nr="76" mi="0" ci="7" mb="0" cb="2"/><line nr="84" mi="3" ci="0" mb="2" cb="0"/><line nr="86" mi="3" ci="0" mb="0" cb="0"/><line nr="90" mi="4" ci="0" mb="0" cb="0"/><line nr="100" mi="9" ci="0" mb="4" cb="0"/><line nr="101" mi="4" ci="0" mb="0" cb="0"/><line nr="109" mi="0" ci="6" mb="0" cb="0"/><line nr="117" mi="4" ci="0" mb="0" cb="0"/><line nr="118" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="34" covered="86"/><counter type="BRANCH" missed="9" covered="13"/><counter type="LINE" missed="7" covered="20"/><counter type="COMPLEXITY" missed="9" covered="12"/><counter type="METHOD" missed="3" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="TreeUtils.java"><line nr="17" mi="3" ci="0" mb="0" cb="0"/><line nr="28" mi="7" ci="0" mb="2" cb="0"/><line nr="40" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="4" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="57" mi="4" ci="0" mb="0" cb="0"/><line nr="59" mi="10" ci="0" mb="2" cb="0"/><line nr="62" mi="3" ci="0" mb="2" cb="0"/><line nr="64" mi="6" ci="0" mb="0" cb="0"/><line nr="68" mi="4" ci="0" mb="0" cb="0"/><line nr="71" mi="3" ci="0" mb="2" cb="0"/><line nr="73" mi="6" ci="0" mb="0" cb="0"/><line nr="77" mi="4" ci="0" mb="0" cb="0"/><line nr="79" mi="1" ci="0" mb="0" cb="0"/><line nr="81" mi="2" ci="0" mb="0" cb="0"/><line nr="96" mi="2" ci="2" mb="3" cb="1"/><line nr="98" mi="2" ci="0" mb="0" cb="0"/><line nr="102" mi="2" ci="6" mb="5" cb="3"/><line nr="105" mi="2" ci="0" mb="0" cb="0"/><line nr="109" mi="0" ci="5" mb="0" cb="2"/><line nr="113" mi="0" ci="12" mb="2" cb="6"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="118" mi="0" ci="12" mb="2" cb="6"/><line nr="120" mi="1" ci="15" mb="2" cb="2"/><line nr="124" mi="0" ci="12" mb="3" cb="5"/><line nr="126" mi="0" ci="6" mb="0" cb="0"/><line nr="129" mi="0" ci="12" mb="4" cb="4"/><line nr="131" mi="0" ci="6" mb="0" cb="0"/><line nr="134" mi="2" ci="0" mb="0" cb="0"/><line nr="137" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="74" covered="92"/><counter type="BRANCH" missed="29" covered="29"/><counter type="LINE" missed="18" covered="12"/><counter type="COMPLEXITY" missed="27" covered="7"/><counter type="METHOD" missed="4" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleTreeWriterImpl.java"><line nr="29" mi="2" ci="0" mb="0" cb="0"/><line nr="30" mi="3" ci="0" mb="0" cb="0"/><line nr="31" mi="1" ci="0" mb="0" cb="0"/><line nr="41" mi="6" ci="0" mb="0" cb="0"/><line nr="42" mi="1" ci="0" mb="0" cb="0"/><line nr="54" mi="2" ci="0" mb="0" cb="0"/><line nr="56" mi="2" ci="0" mb="0" cb="0"/><line nr="59" mi="4" ci="0" mb="0" cb="0"/><line nr="61" mi="2" ci="0" mb="2" cb="0"/><line nr="63" mi="4" ci="0" mb="0" cb="0"/><line nr="66" mi="5" ci="0" mb="0" cb="0"/><line nr="70" mi="7" ci="0" mb="2" cb="0"/><line nr="73" mi="14" ci="0" mb="0" cb="0"/><line nr="75" mi="12" ci="0" mb="0" cb="0"/><line nr="78" mi="7" ci="0" mb="2" cb="0"/><line nr="80" mi="4" ci="0" mb="0" cb="0"/><line nr="84" mi="6" ci="0" mb="2" cb="0"/><line nr="86" mi="4" ci="0" mb="0" cb="0"/><line nr="91" mi="3" ci="0" mb="2" cb="0"/><line nr="93" mi="8" ci="0" mb="2" cb="0"/><line nr="95" mi="4" ci="0" mb="0" cb="0"/><line nr="100" mi="21" ci="0" mb="0" cb="0"/><line nr="105" mi="3" ci="0" mb="2" cb="0"/><line nr="108" mi="8" ci="0" mb="2" cb="0"/><line nr="110" mi="4" ci="0" mb="0" cb="0"/><line nr="116" mi="3" ci="0" mb="0" cb="0"/><line nr="120" mi="7" ci="0" mb="2" cb="0"/><line nr="122" mi="4" ci="0" mb="0" cb="0"/><line nr="126" mi="6" ci="0" mb="2" cb="0"/><line nr="128" mi="4" ci="0" mb="0" cb="0"/><line nr="130" mi="3" ci="0" mb="2" cb="0"/><line nr="132" mi="8" ci="0" mb="2" cb="0"/><line nr="134" mi="4" ci="0" mb="0" cb="0"/><line nr="139" mi="6" ci="0" mb="4" cb="0"/><line nr="141" mi="21" ci="0" mb="0" cb="0"/><line nr="143" mi="3" ci="0" mb="2" cb="0"/><line nr="145" mi="21" ci="0" mb="0" cb="0"/><line nr="147" mi="3" ci="0" mb="2" cb="0"/><line nr="149" mi="21" ci="0" mb="0" cb="0"/><line nr="153" mi="20" ci="0" mb="0" cb="0"/><line nr="159" mi="3" ci="0" mb="2" cb="0"/><line nr="162" mi="8" ci="0" mb="2" cb="0"/><line nr="164" mi="4" ci="0" mb="0" cb="0"/><line nr="170" mi="3" ci="0" mb="0" cb="0"/><line nr="173" mi="1" ci="0" mb="0" cb="0"/><line nr="175" mi="1" ci="0" mb="0" cb="0"/><line nr="177" mi="4" ci="0" mb="0" cb="0"/><line nr="179" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="296" covered="0"/><counter type="BRANCH" missed="36" covered="0"/><counter type="LINE" missed="48" covered="0"/><counter type="COMPLEXITY" missed="21" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="570" covered="317"/><counter type="BRANCH" missed="95" covered="65"/><counter type="LINE" missed="102" covered="67"/><counter type="COMPLEXITY" missed="76" covered="37"/><counter type="METHOD" missed="13" covered="20"/><counter type="CLASS" missed="2" covered="3"/></package><counter type="INSTRUCTION" missed="570" covered="317"/><counter type="BRANCH" missed="95" covered="65"/><counter type="LINE" missed="102" covered="67"/><counter type="COMPLEXITY" missed="76" covered="37"/><counter type="METHOD" missed="13" covered="20"/><counter type="CLASS" missed="2" covered="3"/></report>